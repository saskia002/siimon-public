# Reverse proxy setup for backend service
# sudo nginx -t
# sudo systemctl reload nginx
# sudo systemctl restart nginx

pid                  /run/nginx.pid;
worker_processes     auto;
worker_rlimit_nofile 65535;

events {
    multi_accept       on;
    worker_connections 65535;
}

http {
    log_format      main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';
    access_log      /var/log/nginx/access.log main;
    error_log       /var/log/nginx/error.log warn;
    include         /etc/nginx/mime.types;
    default_type    application/octet-stream;
    include         /etc/nginx/conf.d/*.conf;

    sendfile               on;
    tcp_nopush             on;
    tcp_nodelay            on;
    server_tokens          off;
    types_hash_max_size    2048;
    types_hash_bucket_size 64;
    client_max_body_size   16M;

     upstream app_server {
        server 127.0.0.1:8085 fail_timeout=0;
    }


    server {
        server_name perf.siimon.ee;
        listen      443 ssl http2;
        set         $base /var/www/siimon;
        root        $base/static/testid;

        location / {
            try_files $uri $uri/ /index.html;
        }

        location /v2 {
            proxy_pass       http://app_server/v2;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        ssl_protocols       TLSv1.2;
        ssl_certificate /etc/letsencrypt/live/perf.siimon.ee/fullchain.pem; # managed by Certbot
        ssl_certificate_key /etc/letsencrypt/live/perf.siimon.ee/privkey.pem; # managed by Certbot
        include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    }

    # http to https
    server {
        server_name perf.siimon.ee;
        listen      80;
        return      301 https://$host$request_uri;
    }

    # close the connection to prevent host spoofing
    server {
        listen 80 default_server;
        return 444;
    }

    server {
        if ($host = perf.siimon.ee) {
            return 301 https://$host$request_uri;
        } # managed by Certbot

        server_name perf.siimon.ee;
        listen 80;
        return 404; # managed by Certbot
    }
}
